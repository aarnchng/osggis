/* -*-c++-*- */
/* osgGIS - GIS Library for OpenSceneGraph
 * Copyright 2007-2008 Glenn Waldron and Pelican Ventures, Inc.
 * http://osggis.org
 *
 * osgGIS is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef _OSGGIS_DENSIFY_FILTER_H_
#define _OSGGIS_DENSIFY_FILTER_H_ 1

#include <osgGIS/Common>
#include <osgGIS/FeatureFilter>

namespace osgGIS
{
    /**
     * Filter that adds new points to existing feature shapes.
     *
     * This filter "densifys" a feature by interpolating additional points along 
     * the contours of its existing edges.
     */
    class OSGGIS_EXPORT DensifyFilter : public FeatureFilter
    {
        OSGGIS_META_FILTER( DensifyFilter );  

    public:
        /**
         * Constructs a new densification filter.
         */
        DensifyFilter();

        /**
         * Copy constructor
         */
        DensifyFilter( const DensifyFilter& rhs );

    public: // properties

        /**
         * Sets the maximum allowable distance between points in a feature.
         *
         * @param value
         *      Distance threshold, in feature units.
         */
        void setThreshold( double value );

        /**
         * Gets the maximum allowable distance between points in a feature.
         *
         * @return
         *      Distance threshold, in feature units.
         */
        double getThreshold() const;

    public: // FeatureFilter overrides
        virtual FeatureList process( Feature* input, FilterEnv* env );

    public: // Filter overrides
        virtual void setProperty( const Property& p );
        virtual Properties getProperties() const;

        virtual ~DensifyFilter();

    private:
        double threshold;
    };
}

#endif // _OSGGIS_DENSIFY_FILTER_H_
