/* -*-c++-*- */
/* osgGIS - GIS Library for OpenSceneGraph
 * Copyright 2007-2008 Glenn Waldron and Pelican Ventures, Inc.
 * http://osggis.org
 *
 * osgGIS is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef _OSGGIS_SIMPLESPATIALINDEX_H_
#define _OSGGIS_SIMPLESPATIALINDEX_H_ 1

#include <osgGIS/SpatialIndex>
#include <osgGIS/FeatureStore>

namespace osgGIS
{
	/**
	 * A basic, stub spatial index.
     * This is a basic index that applies no special indexing scheme, but rather just
	 * checks every feature by brute force. Useful for a very low feature count.
	 */
	class SimpleSpatialIndex : public osgGIS::SpatialIndex
	{
	public:
        /**
         * Constructs a spatial index
         *
         * @param store 
         *      Feature store whose contents to index
         */
		SimpleSpatialIndex( FeatureStore* store );
		
	public: // SpatialIndex
	
        /**
         * Gets a cursor that iterates over all the features that intersect
         * a spatial extent.
         *
         * @param extent
         *      Spatial extent to intersect
         * @param match_exactly
         *      If true, check for intersection at the shape level. If false, check
         *      for intersection at the extent (bounding box) level.
         */
	    FeatureCursor getCursor( const GeoExtent& extent, bool match_exactly =false );
	    
        /**
         * Gets the extent of the entire indexed dataset.
         *
         * @return A spatial extent
         */
	    const GeoExtent& getExtent() const;

	public:
		virtual ~SimpleSpatialIndex();

	private:
		osg::ref_ptr<FeatureStore> store;
		GeoExtent extent;
		
		void buildIndex();
	};
}

#endif // _OSGGIS_SIMPLESPATIALINDEX_H_

