/**
 * osgGIS - GIS Library for OpenSceneGraph
 * Copyright 2007 Glenn Waldron and Pelican Ventures, Inc.
 * http://osggis.org
 *
 * osgGIS is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef _OSGGIS_MAKE_NODE_FILTER_H_
#define _OSGGIS_MAKE_NODE_FILTER_H_ 1

#include <osgGIS/Common>
#include <osgGIS/NodeFilter>
#include <osg/StateSet>

namespace osgGIS
{
    /**
     * Assembles osg::Drawable objects into osg::Nodes. This is usually
     * the final step in a filter graph.
     */
    class OSGGIS_EXPORT BuildNodesFilter : public NodeFilter
    {
        OSGGIS_META_FILTER( BuildNodesFilter );

    public:
        enum Options
        {
            CULL_BACKFACES        = 0x01,
            DISABLE_LIGHTING      = 0x02,
            APPLY_CLUSTER_CULLING = 0x04,
            OPTIMIZE              = 0x08
        };

    public:
        /**
         * Constructs a filter with default properties.
         */
        BuildNodesFilter();

        /**
         * Constructs a filter with the specified quick-set options.
         */
        BuildNodesFilter( int options /*Options*/);

        virtual ~BuildNodesFilter();
        
    public:   // properties   

        /**
         * Sets whether to disable GL lighting on the resulting node graphs.
         */
        void setDisableLighting( bool value );
        
        /** 
         * Gets whether to disable GL lighting on the resulting node graphs.
         */
        bool getDisableLighting() const;  
        
        /**
         * Sets whether to enable backface culling on the resulting node.
         */
        void setCullBackfaces( bool value );
        
        /**
         * Gets whether to enable backfase culling on the resulting node.
         */
        bool getCullBackfaces() const;
        
        /**
         * Sets whether to apply cluster culling to the resulting node. 
         * Cluster culling is a fast way to cull the entire node based on
         * a single normal vector. This only applies to geocentric datasets.
         */
        void setApplyClusterCulling( bool value );
        
        /**
         * Gets whether to apply cluster culling to the resulting node.
         */
        bool getApplyClusterCulling() const;  
        
        /**
         * Sets whether to run the OSG optimizer on the resulting node.
         */
        void setOptimize( bool value );
        
        /**
         * Gets whether to run the OSG optimizer on the resulting node.
         */
        bool getOptimize() const;      
        
        void setOptimizerOptions( int optimizer_options );
        
        int getOptimizerOptions() const;

        /** 
         * Sets the line width to set on the resulting node.
         */
        void setLineWidth( float value );

        /**
         * Gets the line width the set on the resulting node.
         */
        float getLineWidth() const;

        /** 
         * Sets the point size to apply to the resulting node graph.
         */
        void setPointSize( float value );

        /**
         * Gets the point size to apply to the resulting node graph.
         */
        float getPointSize() const;

        /**
         * Sets whether to create geometry for the normal vector used
         * for cluster culling (for debugging purposes).
         */
        void setDrawClusterCullingNormals( bool value );

        /**
         * Gets whether to create geometry for the normal vector used
         * for cluster culling (for debugging purposes).
         */
        bool getDrawClusterCullingNormals() const;
        
        void setRasterOverlayScript( Script* script );
        
        Script* getRasterOverlayScript() const;
        
        void setRasterOverlayMaxSize( int size );
        
        int getRasterOverlayMaxSize() const;
        
    public:
    
        virtual void setProperty( const Property& );
        virtual Properties getProperties() const;
        
    protected:
        virtual osg::NodeList process( FragmentList& input, FilterEnv* env );
        virtual osg::NodeList process( osg::NodeList& input, FilterEnv* env );

    private:
        int   options;
        int   optimizer_options;
        float line_width;
        float point_size;
        bool  draw_cluster_culling_normals;
        osg::ref_ptr<Script> raster_overlay_script;
        int raster_overlay_max_size;

        void init( int options );
    };
}


#endif // _OSGGIS_MAKE_NODE_FILTER_H_