/**
 * osgGIS - GIS Library for OpenSceneGraph
 * Copyright 2007 Glenn Waldron and Pelican Ventures, Inc.
 * http://osggis.org
 *
 * osgGIS is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef _OSGGIS_EXTRUDE_GEOM_FILTER_H_
#define _OSGGIS_EXTRUDE_GEOM_FILTER_H_ 1

#include <osgGIS/Common>
#include <osgGIS/BuildGeomFilter>
#include <osgGIS/SkinResource>
//#include <osg/StateSet>
#include <osg/Texture>
#include <osg/TexEnv>

namespace osgGIS
{
    /**
     * Work in progress.
     * Extrudes vector footprints into 3D geometries.
     */
    class OSGGIS_EXPORT ExtrudeGeomFilter : public BuildGeomFilter
    {
        OSGGIS_META_FILTER( ExtrudeGeomFilter );  

    public:
        enum Options
        {
            RANDOMIZE_COLORS  = 0x01,
            RANDOMIZE_HEIGHTS = 0x02,
            HEIGHT_IS_RELATIVE_TO_SEA_LEVEL = 0x04,
            HEIGHT_IS_RELATIVE_TO_TERRAIN   = 0x08,
        };


    public:
        ExtrudeGeomFilter();

        ExtrudeGeomFilter( const osg::Vec4f& color, double height );

        ExtrudeGeomFilter( const int& options );

        virtual ~ExtrudeGeomFilter();
        
    public: //properties

        void setHeightExpr( const std::string& expr );

        const std::string& getHeightExpr() const;

        void setMinHeight( double value );
        
        double getMinHeight() const;
        
        void setMaxHeight( double value );
        
        double getMaxHeight() const;
        
        void setRandomizeHeights( bool value );
        
        bool getRandomizeHeights() const;

        void setRandomizeFacadeTextures( bool value );
        
        bool getRandomizeFacadeTextures() const;

        void setWallSkinExpr( const std::string& expr );

        const std::string& getWallSkinExpr() const;
        
        void setUseVBOs( bool value );
        
        bool getUseVBOs() const;
        

    protected:
        virtual DrawableList process( FeatureList& input, FilterEnv* env );
        virtual DrawableList process( Feature* input, FilterEnv* env );
        
        virtual void setProperty( const Property& p );
        virtual Properties getProperties() const;
        
    private:
        std::string height_expr;
        double min_height;
        double max_height;
        osg::ref_ptr< FeatureFunctor<double> > height_functor;
        int tex_index;
        bool randomize_facade_textures;
        osg::ref_ptr<osg::Texture> active_tex;
        osg::ref_ptr<osg::TexEnv> active_texenv;
        std::string wall_skin_expr;
        bool use_vbos;
        
        SkinResource* getWallSkinForFeature( Feature* f, FilterEnv* env );
    };
}


#endif // _OSGGIS_EXTRUDE_GEOM_FILTER_H_