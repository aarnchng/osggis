/**
 * osgGIS - GIS Library for OpenSceneGraph
 * Copyright 2007 Glenn Waldron and Pelican Ventures, Inc.
 * http://osggis.org
 *
 * osgGIS is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef _OSGGIS_NODE_FILTER_H_
#define _OSGGIS_NODE_FILTER_H_ 1

#include <osgGIS/Common>
#include <osgGIS/ScriptContext>
#include <osgGIS/CollectionFilter>
#include <osgGIS/DrawableFilter>
#include <osg/Node>

namespace osgGIS
{
    /**
     * A filter that processes data into osg::Node scene graphs.
     *
     * A NodeFilter can take as input either osg::Drawable's or osg::Node's and
     * return osg::Node's. To implement a NodeFilter you create a subclass and
     * implement the appropriate process(...) method(s).
     */
    class OSGGIS_EXPORT NodeFilter : public Filter
    {
    public:
        /**
         * Processes a single drawable into a collection of nodes.
         *
         * @param input
         *      Individual drawable to process
         * @param env
         *      Contextual compilation environment
         */
        virtual osg::NodeList process( osg::Drawable* input, FilterEnv* env );
        
        /**
         * Processes a collection of drawables into a collection of nodes.
         *
         * @param input
         *      Batch of drawables to process
         * @param env
         *      Contextual compilation environment
         */
        virtual osg::NodeList process( DrawableList& input, FilterEnv* env );
        
        /**
         * Processes a single node into a collection of nodes.
         *
         * @param input
         *      Individual node to process
         * @param env
         *      Contextual compilation environment
         */
        virtual osg::NodeList process( osg::Node* input, FilterEnv* env );
        
        /**
         * Processes a collection of nodes into a collection of nodes.
         *
         * @param input
         *      Batch of nodes to process
         * @param env
         *      Contextual compilation environment
         */
        virtual osg::NodeList process( osg::NodeList& input, FilterEnv* env );
        
    public:

        FilterState* newState();

        ///**
        // * Pushes a drawable onto this filter's input data queue.
        // */
        //void push( osg::Drawable* input );

        ///**
        // * Pushes a collection of drawables onto this filter's input data queue.
        // */
        //void push( DrawableList& input );

        ///**
        // * Pushes a single node onto this filter's input data queue.
        // */
        //void push( osg::Node* input );

        ///**
        // * Pushes a collection of nodes onto this filter's input data queue.
        // */
        //void push( osg::NodeList& input );

        //bool traverse( FilterEnv* env );

        //virtual void reset( ScriptContext* );
        //
        ///**
        // * Gets the output node collection from this filter. Since a NodeFilter
        // * can be the final node in a script's filter chain, this method allows
        // * the compiler to retrieve the final results.
        // */
        //osg::NodeList& getOutput();
        
    protected:
        NodeFilter();
        virtual ~NodeFilter();        
    //    
    //private:        
    //    DrawableList  in_drawables; 
    //    osg::NodeList in_nodes;
    //    osg::NodeList out_nodes;  
    };
}


#endif // _OSGGIS_NODE_FILTER_H_