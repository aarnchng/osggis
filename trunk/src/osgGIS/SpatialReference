/**
 * osgGIS - GIS Library for OpenSceneGraph
 * Copyright 2007 Glenn Waldron and Pelican Ventures, Inc.
 * http://osggis.org
 *
 * osgGIS is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#pragma once
#include <osgGIS/Common>
#include <osgGIS/Ellipsoid>
#include <string>
#include <osg/Matrixd>

namespace osgGIS
{
	class GeoPoint;
	class GeoShape;
	class GeoExtent;
	
    /**
     * Describes how to interpret a 2D or 3D point in space.
     * (a.k.a "SRS").
     */
	class OSGGIS_EXPORT SpatialReference : public osg::Referenced
	{
	public:
	
        /**
         * Gets the OGC WKT (well-known text) representation of the SRS.
         */
		virtual const std::string& getWKT() const =0;

        /**
         * Returns true if the SRS represents an unprojected location expressed
         * in angular units relative to the whole earth (i.e. longitude/latitude).
         */
		virtual bool isGeographic() const =0;

        /**
         * Returns true if the SRS represents a projected location expressed in
         * linear units (e.g. meters, feet).
         */
		virtual bool isProjected() const =0;
		
        /**
         * Returns true if the SRS represents an XYZ point in 3D space relative to
         * the center of the earth (0,0,0).
         */
		virtual bool isGeocentric() const =0;
		
        /**
         * Gets the "basis" SRS for this SRS. If isGeographic(), there is no basis
         * and this method simply returns "this". If isProjected() or isGeocentric(),
         * the basis is a geographic (lat/lon) SRS describing the ellipsoid model
         * upon which this SRS is based.
         */ 
		virtual const SpatialReference* getGeographicSRS() const =0;

        /** 
         * Gets the ellipsoid (i.e. the approximation of the earth's shape) upon which
         * this SRS is based. This is the ellipsoid contained in the basis SRS ... see
         * getBasisSRS().
         */
        virtual const Ellipsoid& getEllipsoid() const =0;

        /**
         * Gets the "up" vector relative to this spatial reference.
         */
        virtual osg::Vec3d getUpVector( const osg::Vec3d& at ) const;
		
        /**
         * Gets the readable name of this SRS.
         */
		virtual std::string getName() const =0;
        
        /**
         * Gets the optional reference frame matrix that may be applied after resolving
         * the SRS. In other words, MY_POINT = INPUT_POINT * SRS * REF_FRAME.
         */
        virtual const osg::Matrixd& getReferenceFrame() const =0;

        /**
         * Gets the inverse of the optional reference frame matrix that may be applied
         * before projecting a point out of this SRS.
         */
        virtual const osg::Matrixd& getInverseReferenceFrame() const =0;

        /**
         * Creates an exact copy of this SRS, and then applies a new reference frame
         * transform matrix to it.
         */
        virtual SpatialReference* cloneWithNewReferenceFrame( const osg::Matrixd& rf ) const =0;

		
    public:
	
        /**
         * Returns a point transformed into this SRS.
         */
		virtual GeoPoint transform( const GeoPoint& input ) const =0;

        /** 
         * Transforms a point into this SRS (modifying the input data).
         */
        virtual bool transformInPlace( GeoPoint& input ) const =0;
		
        /**
         * Returns a shape transformed into this SRS.
         */
		virtual GeoShape transform( const GeoShape& input ) const =0;

        /**
         * Transforms a shape into this SRS (modifying the input data).
         */
        virtual bool transformInPlace( GeoShape& input ) const =0;
        
        /**
         * Transforms an extent into this srs.
         */
        virtual GeoExtent transform( const GeoExtent& input ) const =0;

        /**
         * Gets whether this and other SRS are mathematically equivalent.
         */
        virtual bool equivalentTo( const SpatialReference* rhs ) const =0;


    public: // static methods

        static bool equivalent(
            const SpatialReference* lhs, 
            const SpatialReference* rhs );
            
            
    protected:
        void applyTo( GeoPoint& point ) const;
        void applyTo( GeoShape& shape ) const;
	};	
	
}