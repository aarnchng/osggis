/**
 * osgGIS - GIS Library for OpenSceneGraph
 * Copyright 2007 Glenn Waldron and Pelican Ventures, Inc.
 * http://osggis.org
 *
 * osgGIS is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef _OSGGIS_RESOURCE_H_
#define _OSGGIS_RESOURCE_H_ 1

#include <osgGIS/Common>
#include <osgGIS/Property>
#include <osgGIS/Tags>
#include <list>
#include <set>
#include <vector>
#include <map>

namespace osgGIS
{
    /**
     * Defines extension/modifier information that can be applied to a feature.
     * This could be something that modifies the appearance of a compiled feature
     * (like a skin/texture) or something at the application level (like a hyperlink).
     */
    class OSGGIS_EXPORT Resource : public osg::Referenced, public IObjectWithProperties, public ObjectWithTags
    {
    public:
        /**
         * Gets the name of this resource.
         */
        const char* getName() const;

        /**
         * Sets the name of this resource.
         */
        void setName( const std::string& name );


    public: // ObjectWithProperties

        virtual void setProperty( const Property& prop );
        virtual Properties getProperties() const;

    public:
        virtual std::string getResourceType() =0;

    protected:
    
        Resource();
        Resource( const std::string& name );

        virtual ~Resource();
        
    private:
        std::string name;
    };
    
    typedef std::vector< osg::ref_ptr<Resource> > ResourceList;
    //typedef std::set< osg::ref_ptr<Resource> > ResourceSet;

    typedef std::set< std::string > ResourceNames;

    struct ResourceFactory : public osg::Referenced {
        virtual Resource* createResource() =0;
    };
    template<typename T> struct ResourceFactoryImpl : public ResourceFactory {
        Resource* createResource() { return new T(); }
    };    

    typedef std::map<std::string,osg::ref_ptr<ResourceFactory> > ResourceFactoryMap;

#define OSGGIS_META_RESOURCE(name) \
    public: \
        virtual std::string getResourceType() { return getStaticResourceType(); } \
        static std::string getStaticResourceType() { return #name; } \
        static ResourceFactory* getResourceFactory() { return new ResourceFactoryImpl<name>(); }        

#define OSGGIS_DEFINE_RESOURCE(name) \
    static bool _osggsis_dr = osgGIS::Registry::instance()->addResourceType( name::getStaticResourceType(), name::getResourceFactory() )

}

#endif // _OSGGIS_RESOURCE_H_