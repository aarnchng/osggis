/* -*-c++-*- */
/* osgGIS - GIS Library for OpenSceneGraph
 * Copyright 2007-2008 Glenn Waldron and Pelican Ventures, Inc.
 * http://osggis.org
 *
 * osgGIS is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef _OSGGIS_FILTER_H_
#define _OSGGIS_FILTER_H_

#include <osgGIS/Common>
#include <osgGIS/Property>
#include <osgGIS/FilterState>
#include <osg/Drawable>
#include <vector>
#include <map>
#include <string>

namespace osgGIS
{
    /**
     * A discrete data-processing element in a FilterGraph.
     *
     * A Filter in a dicrete data processor. It takes input and generates
     * output data. When chained together in a FilterGraph, filters sequentially
     * process data in discrete steps which together form a complete,
     * repeatable data compilation procedure.
     *
     * A Filter's operation should not depend on any external factors, save
     * the information conveyed in the FilterEnv data structure to which
     * every filter has access while it is running. Filters should ideally
     * be stateless with respect to the data they are processing. This helps
     * increase maintainability and predictability.
     */
    class OSGGIS_EXPORT Filter : public osg::Referenced
    {
    public:
        virtual std::string getFilterType() =0;

    public:
        virtual ~Filter();

        /**
         * Sets the name of this filter.
         */
        void setName( const std::string& name );

        /**
         * Gets the name of this filter.
         */
        const std::string& getName() const;

        /**
         * Creates a new state object that can be used with this filter type.
         */
        virtual FilterState* newState() const =0;

        /**
         * Creates an exact copy of this instance.
         */
        virtual Filter* clone() const =0;

    public:

        /**
         * Sets one of the filter's properties by name.
         */
        virtual void setProperty( const Property& prop );

        /**
         * Gets a collection of all this filter's properties.
         */
        virtual Properties getProperties() const;

    protected:

        Filter();

        Filter( const Filter& rhs );
        
    private:
        std::string name;
    };
    
    typedef std::vector< osg::ref_ptr<Filter> > FilterList;

    class FilterFactory : public osg::Referenced {
    public:
        virtual Filter* createFilter() const =0;
    };
    template<typename T> struct FilterFactoryImpl : public FilterFactory {
        Filter* createFilter() const { return new T(); }
    };    

    typedef std::map<std::string,osg::ref_ptr<FilterFactory> > FilterFactoryMap;

#define OSGGIS_META_FILTER(name) \
    public: \
        virtual std::string getFilterType() { return getStaticFilterType(); } \
        virtual Filter* clone() const { return new name ( *this ); } \
        static std::string getStaticFilterType() { return #name; } \
        static FilterFactory* getFilterFactory() { return new FilterFactoryImpl<name>(); }     

#define OSGGIS_DEFINE_FILTER(name) \
    static bool _osggsis_df_##name = osgGIS::Registry::instance()->addFilterType( name::getStaticFilterType(), name::getFilterFactory() )


}

#endif // _OSGGIS_FILTER_H_
