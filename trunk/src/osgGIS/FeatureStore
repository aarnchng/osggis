/**
 * osgGIS - GIS Library for OpenSceneGraph
 * Copyright 2007 Glenn Waldron and Pelican Ventures, Inc.
 * http://osggis.org
 *
 * osgGIS is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef _OSGGIS_FEATURESTORE_H_
#define _OSGGIS_FEATURESTORE_H_ 1

#include <osgGIS/Common>
#include <osgGIS/Feature>
#include <osgGIS/SpatialReference>
#include <osgGIS/GeoExtent>

namespace osgGIS
{
    /**
     * Interface to a feature data backing store.
     *
     * A FeatureStore holds an arbitrarily large collection of Feature objects.
     * This interface gives you access to that store, which is usually disk- or
     * network-based, without loading the whole thing into memory.
     *
     * Typically a FeatureLayer will sit atop a FeatureStore and provide access
     * to a spatial index (for fast geospatial searching) and layer-level 
     * attribution.
     */
	class OSGGIS_EXPORT FeatureStore : public osg::Referenced
	{
	public:
        /**
         * Gets whether a connection to the feature store was successfully
         * established.
         */
		virtual bool isReady() const =0;

        /**
         * Gets the name of the store.
         */
        virtual const std::string& getName() const =0;
		
        /**
         * Gets the spatial reference system (SRS) of the geodata in the
         * store. This may be NULL is no SRS is specified.
         */
		virtual SpatialReference* getSRS() =0;
		
        /**
         * Gets the total number of features in the backing store.
         */
		virtual int getFeatureCount() const =0;
		
        /**
         * Gets the minimum bounding rectangle containing all the geodata
         * in the feature store.
         */
		virtual const GeoExtent& getExtent() const =0;
		
        /**
         * Gets an individual feature from the store.
         * 
         * @param oid
         *      Primary key (unique identifier) of the feature to get
         */
		virtual Feature* getFeature( const FeatureOID& oid ) =0;
		
        /**
         * Creates a cursor that will iterator over ALL the features in
         * the backing store, in no particular order.
         */
		virtual FeatureCursor* createCursor() =0;
		
		/**
		 * Writes a feature to the feature store.
		 */
		virtual bool insertFeature( Feature* f ) =0;

    public:

        /**
         * Returns true if the feature store supports random access to
         * feature data (i.e. whether you can call getFeature(oid)).
         */
        virtual bool supportsRandomRead() const =0;
	};
}


#endif // _OSGGIS_FEATURESTORE_H_
