/** -*-c++-*-
 * osgGIS - GIS Library for OpenSceneGraph
 * Copyright 2007-2008 Glenn Waldron and Pelican Ventures, Inc.
 * http://osggis.org
 *
 * osgGIS is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef _OSGGIS_RESOURCE_LIBRARY_H_
#define _OSGGIS_RESOURCE_LIBRARY_H_ 1

#include <osgGIS/Common>
#include <osgGIS/Resource>
#include <osgGIS/SkinResource>
#include <osgGIS/ModelResource>
#include <osgGIS/RasterResource>
#include <osgGIS/SRSResource>
#include <osgGIS/PathResource>
#include <osgGIS/FeatureLayerResource>
#include <osg/StateSet>
#include <osg/Node>
#include <OpenThreads/ReentrantMutex>
#include <map>

namespace osgGIS
{
    /**
     * A resource library is a container for Resource and Rule definitions.
     * Resources define external things that a compiler can apply to features
     * (like a texture skin or a hyperlink). Rules define how a a feature
     * selects a particular resource.
     *
     * This class is thread-safe.
     */
    class OSGGIS_EXPORT ResourceLibrary : public osg::Referenced
    {
    public:
        ResourceLibrary( OpenThreads::ReentrantMutex& mutex_to_use );

    public:
        void addResource( Resource* resource );
        
        void removeResource( Resource* resource );
        

        Resource* getResource( const std::string& name );


        SkinResource* getSkin( const std::string& name );

        ResourceList getSkins();

        ResourceList getSkins( const SkinResourceQuery& query );

        osg::StateSet* getStateSet( SkinResource* skin );

        SkinResourceQuery newSkinQuery();

        
        
        ModelResource* getModel( const std::string& name );

        ResourceList getModels();

        ResourceList getModels( const ModelResourceQuery& query );

        ModelResourceQuery newModelQuery();

        osg::Node* getNode( ModelResource* model, bool optimize =true );
        
        osg::Node* getProxyNode( ModelResource* model );
        
        
        RasterResource* getRaster( const std::string& name );
        
        FeatureLayer* getFeatureLayer( const std::string& name );

        SpatialReference* getSRS( const std::string& name );

        std::string getPath( const std::string& name );

        PathResource* getPathResource( const std::string& name );
        
        
    private:
        SkinResourceVec skins;
        typedef std::map< SkinResource*, osg::ref_ptr<osg::StateSet> > SkinStateSets;
        SkinStateSets skin_state_sets;

        ModelResourceVec models;
        typedef std::map< ModelResource*, osg::ref_ptr<osg::Node> > ModelNodes;
        ModelNodes model_nodes;
        
        RasterResourceVec rasters;
        FeatureLayerResourceVec feature_layers;
        SRSResourceVec srs_list;
        PathResourceVec paths;

        OpenThreads::ReentrantMutex& mut;
    };
}

#endif // _OSGGIS_RESOURCE_LIBRARY_H_
