/**
 * osgGIS - GIS Library for OpenSceneGraph
 * Copyright 2007 Glenn Waldron and Pelican Ventures, Inc.
 * http://osggis.org
 *
 * osgGIS is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef _OSGGIS_SUBSTITUTE_MODEL_FILTER_H_
#define _OSGGIS_SUBSTITUTE_MODEL_FILTER_H_ 1

#include <osgGIS/Common>
#include <osgGIS/NodeFilter>

namespace osgGIS
{
    /**
     * Builds nodes for placing externally loaded models at featuer locations.
     */
    class OSGGIS_EXPORT SubstituteModelFilter : public NodeFilter
    {
        OSGGIS_META_FILTER( SubstituteModelFilter );

    public:
        /**
         * Constructs a new filter for converting features into labels.
         */
        SubstituteModelFilter();


    public: //properties

        /**
         * Sets the expression that evaluates to the model resource to use.
         */
        void setModelExpr( const std::string& expr );

        /**
         * Gets the expression that evaluates to the model resource to use.
         */
        const std::string& getModelExpr() const;
        
        /**
         * Sets the expression that evaluates to the absolute pathname of the model
         * to use (rather than specifying a resource name expression as you do with
         * setModelExpr).
         */
        void setModelPathExpr( const std::string& expr );
        
        /**
         * Gets the xpression that evaluates to the absolute pathname of the model
         * to use. 
         */
        const std::string& getModelPathExpr() const;
        
        /**
         * Sets whether to materialize models within the generated scene graph. If true,
         * the filter will incorporate the model's geometry within the output node,
         * rather than reference it externally via proxy. If false, a ProxyNode will
         * reference each instance.
         *
         * If true, this will also cluster instance groups for performance purposes.
         * For example, if you have a point cluster in which each point represents an
         * extref to a tree model, just precede this filter with a CollectionFilter and
         * this filter will inline, localize, and optimize the tree references for you.
         *
         * (NOTE: at the moment, "Materialize" only works when this filter is preceded
         * by a CollectionFilter.)
         */
        void setMaterialize( bool value );
        
        /**
         * Gets whether to materialize/inline model references. See setMaterialize() for
         * details.
         */
        bool getMaterialize() const;
        
        //TODO: comment
        void setModelScaleExpr( const std::string& value );
        
        //TODO: comment
        const std::string& getModelScaleExpr() const;
        
    public:
    
        virtual void setProperty( const Property& );
        virtual Properties getProperties() const;

    public:

        virtual osg::NodeList process( FeatureList& input, FilterEnv* env );

        virtual osg::NodeList process( Feature* input, FilterEnv* env );
        
    protected:        

        virtual ~SubstituteModelFilter();
        
    private:
        osg::Node* materializeAndClusterFeatures( const FeatureList& features, FilterEnv* env, osg::Node* model );
    
        std::string model_expr;
        std::string model_path_expr;
        std::string model_scale_expr;
        bool materialize;
    };
}


#endif // _OSGGIS_BUILD_LABELS_FILTER_H_