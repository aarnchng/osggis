/* -*-c++-*- */
/* osgGIS - GIS Library for OpenSceneGraph
 * Copyright 2007-2008 Glenn Waldron and Pelican Ventures, Inc.
 * http://osggis.org
 *
 * osgGIS is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef _OSGGIS_SUBSTITUTE_MODEL_FILTER_H_
#define _OSGGIS_SUBSTITUTE_MODEL_FILTER_H_ 1

#include <osgGIS/Common>
#include <osgGIS/NodeFilter>

namespace osgGIS
{
    /**
     * Builds nodes for placing externally loaded models at featuer locations.
     */
    class OSGGIS_EXPORT SubstituteModelFilter : public NodeFilter
    {
        OSGGIS_META_FILTER( SubstituteModelFilter );

    public:
        /**
         * Constructs a new filter for converting features into labels.
         */
        SubstituteModelFilter();

        SubstituteModelFilter( const SubstituteModelFilter& rhs );


    public: //properties

        /**
         * Sets the script that evaluates to the model resource to use.
         */
        void setModelScript( Script* script );

        /**
         * Gets the script that evaluates to the model resource to use.
         */
        Script* getModelScript() const;
        
        /**
         * Sets the script that evaluates to the absolute pathname of the model
         * to use (rather than specifying a resource name expression as you do with
         * setModelExpr).
         */
        void setModelPathScript( Script* script );
        
        /**
         * Gets the script that evaluates to the absolute pathname of the model
         * to use. 
         */
        Script* getModelPathScript() const;
        
        /**
         * Sets whether to materialize models within the generated scene graph. If true,
         * the filter will incorporate the model's geometry within the output node,
         * rather than reference it externally via proxy. If false, a ProxyNode will
         * reference each instance.
         *
         * If true, this will also cluster instance groups for performance purposes.
         * For example, if you have a point cluster in which each point represents an
         * extref to a tree model, just precede this filter with a CollectionFilter and
         * this filter will inline, localize, and optimize the tree references for you.
         *
         * NOTE: clustering only works when this filter is preceded by a Collection filter
         * that batches features together.
         */
        void setCluster( bool value );
        
        /**
         * Gets whether to cluster materialized model references. See setCluster() for details.
         */
        bool getCluster() const;
        
        /**
         * Sets a script that evaluates to a 3-D scale factor for the model instance (a vec3).
         */
        void setModelScaleScript( Script* script );
        
        /**
         * Gets a script that evaluates to a 3-D scale factor for the model instance (a vec3).
         */
        Script* getModelScaleScript() const;

        /**
         * Sets a script that evalutes to the heading (in degrees) of the model instance (double).
         */
        void setModelHeadingScript( Script* script );

        /**
         * Gets the script that evaluates to the heading (in degrees) of the model instance.
         */
        Script* getModelHeadingScript() const;

        /**
         * Sets a script that evaluates to a string that will be set as the model instance's
         * node name. (Note: Setting a feature name will disable clustering, since each feature
         * will need to be in its own group.)
         */
        void setFeatureNameScript( Script* script );

        /**
         * Gets a script that evaluates to a string that will be set as the model instance's
         * node name.
         */
        Script* getFeatureNameScript() const;

        /**
         * Sets whether to run the osgUtil Optimizer on a model before substituting it.
         * Default is true.
         */
        void setOptimizeModel( bool value );

        /**
         * Gets whether to run the osgUtil Optimizer on a model before substituting it.
         */
        bool getOptimizeModel() const;
        
    public:
    
        virtual void setProperty( const Property& );
        virtual Properties getProperties() const;

    public:

        virtual osg::NodeList process( FeatureList& input, FilterEnv* env );

        virtual osg::NodeList process( Feature* input, FilterEnv* env );
        
    protected:        

        virtual ~SubstituteModelFilter();
        
    private:
        osg::Node* materializeAndClusterFeatures( const FeatureList& features, FilterEnv* env, osg::Node* model );
        void assignFeatureName( osg::Node* node, Feature* input, FilterEnv* env );
        osg::Node* buildOutputNode( osg::Node* model_node, Feature* input, FilterEnv* env );
    
        osg::ref_ptr<Script> model_script;
        osg::ref_ptr<Script> model_path_script;
        osg::ref_ptr<Script> model_scale_script;
        osg::ref_ptr<Script> model_heading_script;
        osg::ref_ptr<Script> feature_name_script;
        bool cluster;
        bool optimize_model;
    };
}


#endif // _OSGGIS_BUILD_LABELS_FILTER_H_

