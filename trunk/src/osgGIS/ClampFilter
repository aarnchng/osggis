/**
 * osgGIS - GIS Library for OpenSceneGraph
 * Copyright 2007 Glenn Waldron and Pelican Ventures, Inc.
 * http://osggis.org
 *
 * osgGIS is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef _OSGGIS_CLAMP_FILTER_H_
#define _OSGGIS_CLAMP_FILTER_H_ 1

#include <osgGIS/Common>
#include <osgGIS/FeatureFilter>
#include <osg/Node>

namespace osgGIS
{
    /**
     * Clamps incoming features, point or line, to a terrain tile.
     *
     * Note that this filter does NOT traverse multiple LODs or PagedLODs.
     * Rather, it is a simple building block. For example to clamp to a multi-LOD
     * terrain, you would run a script containing this filter on each LOD and then
     * piece them together. Same goes for PagedLODs - see the PagedLayerCompiler
     * class.
     *
     * This filter does NOT clamp filled polygons (yet). Someday it will.
     */
    class OSGGIS_EXPORT ClampFilter : public FeatureFilter
    {
    public:
        enum Technique
        {
            TECHNIQUE_SIMPLE,
            TECHNIQUE_CONFORM
        };

    public:
        virtual std::string getFilterType() { return "ClampFilter"; }


    public:
        /**
         * Constucts a new clamp filter.
         */
        ClampFilter();


    public: // properties

        void setTechnique( const Technique& value );

        const Technique& getTechnique() const;


    public:

        virtual void setProperty( const Property& p );
        virtual Properties getProperties() const;

    public:
        virtual FeatureList process( Feature* input, FilterEnv* env );

        virtual ~ClampFilter();

    private:
        Technique technique;
    };
};

#endif // _OSGGIS_CLAMP_FILTER_H_