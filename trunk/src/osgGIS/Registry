/**
 * osgGIS - GIS Library for OpenSceneGraph
 * Copyright 2007 Glenn Waldron and Pelican Ventures, Inc.
 * http://osggis.org
 *
 * osgGIS is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef _OSGGIS_REGISTRY_H_
#define _OSGGIS_REGISTRY_H_ 1

#include <osgGIS/Common>
#include <osgGIS/FeatureLayer>
#include <osgGIS/SpatialReferenceFactory>
#include <osgGIS/FeatureStoreFactory>
#include <osgGIS/RasterStoreFactory>
#include <osgGIS/Filter>
#include <osgGIS/Resource>
#include <osgGIS/ScriptEngine>

namespace osgGIS
{
    /**
     * Package singleton class for factories and factory methods.
     */
    class OSGGIS_EXPORT Registry
	{
	public:
        /**
         * Gets the singleton registry instance.
         */
		static Registry* instance();

        /**
         * Gets the default SRS facotry.
         */
        static SpatialReferenceFactory* SRSFactory();

	public:
		
        /**
         * Creates a feature layer from a feature store connection.
         *
         * @param uri
         *      URI of the feature store to use as the underlying data
         *      source for this layer.
         */
        FeatureLayer* createFeatureLayer( const std::string& uri );

	public:

        /**
         * Gets the interface for creating spatial reference systems.
         */
		SpatialReferenceFactory* getSRSFactory();
		
        /** 
         * Sets the interface for creating spatial reference systems.
         * You can call this to replace the default implememtation with
         * a custom one.
         *
         * @param factory
         *      New feature store factory implementation.
         */
		void setSRSFactory( SpatialReferenceFactory* factory );
		
        /**
         * Gets the interface for creating feature store connections.
         */
		FeatureStoreFactory* getFeatureStoreFactory();
		
        /** 
         * Sets the interface for creating feature store connections. You
         * can call this to replace the default implementation with a
         * custom one.
         *
         * @param factory
         *      New feature store factory implementation.
         */
		void setFeatureStoreFactory( FeatureStoreFactory* factory );
		
		/**
		 * Gets the interface for creating raster store connections.
		 */
		RasterStoreFactory* getRasterStoreFactory();

        /**
         * Sets the interface for creating raster store connections.
         */
        void setRasterStoreFactory( RasterStoreFactory* factory );
        
        ScriptEngine* createScriptEngine();
		

    public:
        Filter* createFilterByType( const std::string& type );

        bool addFilterType( const std::string& type, FilterFactory* factory );

        Resource* createResourceByType( const std::string& type );

        bool addResourceType( const std::string& type, ResourceFactory* factory );
        
        
        /**
         * Sets the absolute path of a directory in which system components can
         * store temporarily or other build-related files.
         */
        void setWorkDirectory( const std::string& abs_path );
        
        /**
         * Gets the absolute path of a directory in which system components can
         * store temporarily or other build-related files.
         */
        const std::string& getWorkDirectory() const;
        
        /**
         * Returns true is a work directory is set.
         */
        bool hasWorkDirectory() const;
        
	private:
		Registry();
		
		osg::ref_ptr<SpatialReferenceFactory> spatial_ref_factory;
		osg::ref_ptr<FeatureStoreFactory>     feature_store_factory;
		osg::ref_ptr<RasterStoreFactory>      raster_store_factory;
        FilterFactoryMap                      filter_factories;
        ResourceFactoryMap                    resource_factories;
        std::string                           work_dir;

		static Registry* singleton;
		
	public:
		virtual ~Registry();
	};
}

#endif // _OSGGIS_REGISTRY_H_