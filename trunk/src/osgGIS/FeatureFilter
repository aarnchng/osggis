/**
 * osgGIS - GIS Library for OpenSceneGraph
 * Copyright 2007 Glenn Waldron and Pelican Ventures, Inc.
 * http://osggis.org
 *
 * osgGIS is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef _OSGGIS_FEATUREFILTER_H_
#define _OSGGIS_FEATUREFILTER_H_ 1

#include <osgGIS/Common>
#include <osgGIS/Filter>
#include <osgGIS/Feature>

namespace osgGIS
{
    /**
     * A filter that processes feature data.
     *
     * Create a feature-processing filter by subclassing this class and 
     * overriding one or both of the process() methods, depending on whether
     * you want to process features individually or in batches.
     */
    class OSGGIS_EXPORT FeatureFilter : public Filter
    {            
    protected:    

        /**
         * Processes a single feature.
         *
         * @param input
         *      Individual feature to process.
         * @param env
         *      Contextual compilation environment.
         * @return
         *      A collection of processed features. The default implementation
         *      of this method just returns the input.
         */
        virtual FeatureList process( Feature* input, FilterEnv* env );    


        /**
         * Processes a batch of features.
         *
         * @param input
         *      Batch of features to process.
         * @param env
         *      Contextual compilation environment.
         * @return
         *      A collection of processed features. The default implementation
         *      of this method just returns the input.
         */
        virtual FeatureList process( FeatureList& input, FilterEnv* env );


    public: // Internal compilation methods

        void push( Feature* input );
        void push( const FeatureList& input );
        bool traverse( FilterEnv* env );
        
        virtual void reset( ScriptContext* );
        
    protected:

        FeatureFilter();
        virtual ~FeatureFilter();
                
    private:        

        FeatureList in_features;
    };
}


#endif // _OSGGIS_FEATUREFILTER_H_