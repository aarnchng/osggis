/* -*-c++-*- */
/* osgGIS - GIS Library for OpenSceneGraph
 * Copyright 2007-2008 Glenn Waldron and Pelican Ventures, Inc.
 * http://osggis.org
 *
 * osgGIS is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef _OSGGIS_FEATUREFILTER_H_
#define _OSGGIS_FEATUREFILTER_H_ 1

#include <osgGIS/Common>
#include <osgGIS/Filter>
#include <osgGIS/Feature>

namespace osgGIS
{
    /**
     * Base class for a Filter that processes Feature instances.
     *
     * FeatureFilter implementations subclass this class and override one or both of
     * the process() methods.
     */
    class OSGGIS_EXPORT FeatureFilter : public Filter
    {            
    public:    

        /**
         * Processes a single Feature.
         *
         * @param input
         *      Individual Feature to process.
         * @param env
         *      Runtime processing environment.
         * @return
         *      A collection of Feature instances. The default implementation
         *      of this method just returns the input in a list.
         */
        virtual FeatureList process( Feature* input, FilterEnv* env );    


        /**
         * Processes a batch of Feature objects.
         *
         * @param input
         *      Batch of features to process.
         * @param env
         *      Runtime processing environment.
         * @return
         *      A collection of Feature instances. The default implementation
         *      of this method just returns the input.
         */
        virtual FeatureList process( FeatureList& input, FilterEnv* env );


    public: // Internal compilation methods

        /* (no api docs)
         * Generates a new state object for this filter.
         */
        virtual FilterState* newState() const;
        
    protected:

        FeatureFilter();
        virtual ~FeatureFilter();
    };
}


#endif // _OSGGIS_FEATUREFILTER_H_
