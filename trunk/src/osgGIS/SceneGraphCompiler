/**
 * osgGIS - GIS Library for OpenSceneGraph
 * Copyright 2007 Glenn Waldron and Pelican Ventures, Inc.
 * http://osggis.org
 *
 * osgGIS is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef _OSGGIS_SCENE_GRAPH_COMPILER_H
#define _OSGGIS_SCENE_GRAPH_COMPILER_H 1

#include <osgGIS/Common>
#include <osgGIS/FilterGraph>
#include <osgGIS/FeatureLayer>
#include <osgGIS/Session>
#include <osg/Group>

namespace osgGIS
{
    /**
     * Uses a filter graph to compile a feature layer into an OSG scene graph.
     */
    class OSGGIS_EXPORT SceneGraphCompiler : public osg::Referenced
    {
    public:
        /**
         * Constructs a new compiler (with a default session).
         *
         * @param layer
         *      Feature layer to compile
         * @param graph
         *      Graph to use to compile the feature layer
         */
        SceneGraphCompiler( FeatureLayer* layer, FilterGraph* graph );

        /**
         * Compiles the feature layer into a scene graph.
         *
         * @return The scene graph containing the compiled feature layer.
         */
        osg::Group* compile();
        
        /**
         * Compiles the feature layer into a scene graph.
         *
         * @param env
         *      Context within which to compile the feature layer. This can
         *      convey environment-sensitive information such as the spatial
         *      area of interest, the LOD range, and the spatial reference 
         *      system. This way you can design a single graph and use it
         *      over and over with different context settings. See FilterEnv
         *      for more information.
         * @return
         *      Scene graph containing the compiled feature layer
         */
        osg::Group* compile( FilterEnv* env );

        /**
         * Compiles the specified features from the feature layer into a scene graph.
         */
        osg::Group* compile( FeatureCursor& cursor );
        

    public:

        FeatureLayer* getFeatureLayer();

        FilterGraph* getFilterGraph();

        Session* getSession();


    public:

        virtual ~SceneGraphCompiler();

        
    private:
        osg::ref_ptr<FeatureLayer> layer;
        osg::ref_ptr<FilterGraph>  graph;
        osg::ref_ptr<Session>      session;
    };
}


#endif // _OSGGIS_SCENE_GRAPH_COMPILER_H
