#ifndef _OSGGIS_UTILS_H_
#define _OSGGIS_UTILS_H_ 1

#include <osgGIS/Common>
#include <osgGIS/GeoShape>
#include <osgDB/Archive>
#include <string>

namespace osgGIS
{
    struct OSGGIS_EXPORT StringUtils
    {
        /**
         * Returns true if one string starts with another string.
         */
        static bool startsWith(
            const std::string& str,
            const std::string& prefix,
            bool  case_sensitive =false );

        /** 
         *  Returns true if one string ends with another string.
         */
        static bool endsWith( 
            const std::string& str,
            const std::string& suffix,
            bool  case_sensitive =false );
    };
    
    struct OSGGIS_EXPORT PathUtils
    {
        static bool isAbsPath(
            const std::string& path );
            
        static std::string getAbsPath(
            const std::string& base_path,
            const std::string& input_path );
            
        static std::string combinePaths(
            const std::string& left,
            const std::string& right );
    };
    
    struct OSGGIS_EXPORT FileUtils
    {
        static long getFileTimeUTC(
            const std::string& path );
    };
    
    struct OSGGIS_EXPORT GeomUtils
    {
        /**
         * Returns true if the point lies inside the polygon.
         *
         * Note: SRS are ignored; the method assumes the point and the
         * polygon share the same SRS
         */
        static bool isPointInPolygon(
            const GeoPoint& point,
            const GeoPointList& polygon );
            
        /**
         * Returns true if the polygon is would clockwise.
         */
        static bool isPolygonCW(
            const GeoPointList& polygon );
            
        /**
         * Counts the number of geodes in a scene graph.
         */
        static int getNumGeodes( osg::Node* node );

        /**
         * Sets the data variance for all nodes/drawables in a scene graph.
         */
        static void setDataVarianceRecursively(
            osg::Node* node,
            const osg::Object::DataVariance& variance );
    };
    
    struct OSGGIS_EXPORT ImageUtils
    {
        static osg::Image* convertRGBAtoDDS( 
            osg::Image* in_rgba );
            
        static unsigned long roundUpToPowerOf2( 
            unsigned long n,
            unsigned long cap =0 );
        
        static unsigned long roundToNearestPowerOf2( 
            unsigned long n );
    };
}

#endif //_OSGGIS_TERRAIN_UTILS_H_