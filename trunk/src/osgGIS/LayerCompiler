/**
 * osgGIS - GIS Library for OpenSceneGraph
 * Copyright 2007 Glenn Waldron and Pelican Ventures, Inc.
 * http://osggis.org
 *
 * osgGIS is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef _OSGGIS_LAYER_COMPILER_H_
#define _OSGGIS_LAYER_COMPILER_H_ 1

#include <osgGIS/Common>
#include <osgGIS/FeatureLayer>
#include <osgGIS/Script>
#include <osgGIS/SmartReadCallback>
#include <osg/Node>
#include <osgDB/Archive>
#include <osgUtil/IntersectionVisitor>
#include <string>

namespace osgGIS
{
    /**
     * Base class for feature layer compilers.
     */
    class OSGGIS_EXPORT LayerCompiler
    {
    protected:
        /**
         * Constructs a new compiler.
         */
        LayerCompiler();

    public:
        /**
         * Adds a script that should be used to build geometry within
         * the specified visibility range.
         *
         * @param min_range
         *      Minimum visibility range - get any closer and the geometry 
         *      disappeares.
         * @param max_range
         *      Maximum visibility range - get any further and the geometry
         *      disappears.
         * @param script
         *      Compile geometry using this script for the given range.
         */
        void addScript( float min_range, float max_range, Script* script );
        
        /** 
         * Sets the reference terrain against which to compile.
         */
        void setTerrain(
            osg::Node*              terrain, 
            const SpatialReference* terrain_srs,
            const GeoExtent&        terrain_extent );
           
        /** 
         * Sets the reference terrain against which to compile.
         */ 
        void setTerrain(
            osg::Node*              terrain, 
            const SpatialReference* terrain_srs );
            
        /**
         * Sets the archive to which the compiler should write files,
         * if applicable.
         */
        void setArchive( osgDB::Archive* archive );
        
        osgDB::Archive* getArchive();

        /**
         * Sets whether to apply fading to LOD nodes.
         */
        void setFadeLODs( bool value );

        /** 
         * Gets whether to apply fading to LOD nodes.
         */
        bool getFadeLODs() const;

        /**
         * Sets the render bin number to assign to this layer.
         * INT_MAX means no render bin
         */
        void setRenderBinNumber( int value );
        
        /**
         * Gets the render bin number to assign to this layer.
         * INT_MAX means no render bin.
         */
        int getRenderBinNumber() const;

    protected:
        struct ScriptRange {
            float min_range, max_range;
            osg::ref_ptr<Script> script;
        };
        typedef std::list<ScriptRange>  ScriptRangeList;
        ScriptRangeList                 script_ranges;
        osg::ref_ptr<osg::Node>         terrain;
        osg::ref_ptr<SpatialReference>  terrain_srs;
        GeoExtent                       terrain_extent;            
        osg::ref_ptr<SmartReadCallback> read_cb;
        int                             render_bin_number;
        bool                            fade_lods;
        osg::ref_ptr<osgDB::Archive>    archive;
    };
}

#endif // _OSGGIS_SIMPLE_LAYER_COMPILER_H_
