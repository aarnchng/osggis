/** -*-c++-*-
 * osgGIS - GIS Library for OpenSceneGraph
 * Copyright 2007-2008 Glenn Waldron and Pelican Ventures, Inc.
 * http://osggis.org
 *
 * osgGIS is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef _OSGGIS_BUILD_GEOM_FILTER_H_
#define _OSGGIS_BUILD_GEOM_FILTER_H_ 1

#include <osgGIS/Common>
#include <osgGIS/FragmentFilter>

namespace osgGIS
{
    /**
     * Assembles feature data into basic fragments.
     */
    class OSGGIS_EXPORT BuildGeomFilter : public FragmentFilter
    {
        OSGGIS_META_FILTER( BuildGeomFilter );

    public:
        /**
         * Constructs a new filter for converting features into geometry.
         */
        BuildGeomFilter();

        BuildGeomFilter( const BuildGeomFilter& rhs );


    public: //properties
    
        /**
         * Sets the overall color to assign to generated primitives.
         * @param color
         *      A Vec4 color
         */
        void setColor( const osg::Vec4f& color );
        
        /**
         * Gets the overall color to assign to generated primitives.
         */
        const osg::Vec4f& getColor() const;

        /**
         * Sets the script that evalutes to the color to apply to the geometry.
         */
        void setColorScript( Script* script );

        /**
         * Gets the script that evaluates to the color to apply to the 
         * geometry.
         */
        Script* getColorScript() const;
        
        /**
         * Sets the script that evaluates to the name of the RasterResource
         * to use to texture the geometry.
         */
        void setRasterOverlayScript( Script* script );
        
        /**
         * Gets the script that evaluates to the name of the RasterResource
         * to use to texture the geometry.
         */
        Script* getRasterOverlayScript() const;
        
        /**
         * Sets the maximum size (width or height) of a texture created from
         * the raster referenced by the raster script. Set this to 0 to disable
         * the capping.
         */
        void setRasterOverlayMaxSize( int max_size );
        
        /**
         * Gets the maximum size (width or height) or a texture created from
         * the raster referenced by the raster script. A value less than or
         * equal to 0 means no capping.
         */
        int getRasterOverlayMaxSize() const;
        
        void setFeatureNameScript( Script* script );
        
        Script* getFeatureNameScript() const;
        
    public:
    
        virtual void setProperty( const Property& );
        virtual Properties getProperties() const;

    protected:

        virtual FragmentList process( FeatureList& input, FilterEnv* env );
        virtual FragmentList process( Feature* input, FilterEnv* env );
        
    protected:
        virtual osg::Vec4 getColorForFeature( Feature* input, FilterEnv* env );
        void applyFragmentName( Fragment*, Feature*, FilterEnv* );
        void applyOverlayTexturing( osg::Geometry* geom, Feature* input, FilterEnv* env );
        void generateNormals( osg::Geometry* geom );

        virtual ~BuildGeomFilter();
        
    protected:
        osg::ref_ptr<Script> color_script;
        osg::ref_ptr<Script> feature_name_script;
        osg::Vec4            overall_color;
        osg::ref_ptr<Script> raster_overlay_script;
        int                  raster_overlay_max_size;   

    private: // transients
        bool      is_batch;
        osg::Vec4 batch_feature_color;
    };
}


#endif // _OSGGIS_BUILD_GEOM_FILTER_H_
