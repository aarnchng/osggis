/**
 * osgGIS - GIS Library for OpenSceneGraph
 * Copyright 2007 Glenn Waldron and Pelican Ventures, Inc.
 * http://osggis.org
 *
 * osgGIS is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef _OSGGIS_COLLECTION_FILTER_H_
#define _OSGGIS_COLLECTION_FILTER_H_ 1

#include <osgGIS/Common>
#include <osgGIS/Filter>
#include <osgGIS/Feature>
#include <osg/Drawable>
#include <osg/Node>

namespace osgGIS
{
    /**
     * A filter that collects incoming data and meters it out in batches.
     *
     * Normally, data (such as features or drawables) passes through a script
     * one element at a time. A collection filter will "collect" elements,
     * wait until a checkpoint is reached, and then meter the collected
     * elements out in batches.
     * 
     * Since most filters have the options of processing data either in 
     * batches or one element at a time, a collection filter is useful for
     * combining related features or for enabling optimization. 
     *
     * For example: The CombineLinesFilter optimizes line layers by combining
     * line segments that share endpoints into single line strips, reducing the
     * number of features and helping performance. Since this filter needs to
     * access all incoming features as a group and compare them, you must precede
     * it with a CollectionFilter.
     *
     * Another possible use for a collection filter would be to save the state
     * of the script to support partial compilation or data caching. This is
     * not yet implemented but will be in the future.
     */
    class OSGGIS_EXPORT CollectionFilter : public Filter
    {
        OSGGIS_META_FILTER( CollectionFilter );  

    public:
        /**
         * Constructs a new collection filter with no metering limit;
         * i.e. it will collect all incoming elements into a single batch.
         */
        CollectionFilter();

        /**
         * Constructs a new collection filter.
         * 
         * @param metering
         *      The filter will collect elements and then pass them on in
         *      batches no larger than this number of elements.
         */
        CollectionFilter( int metering );


    public: // properties

        void setMetering( int value ) { metering = value; }

        int getMetering() const { return metering; }

    
    public:

        FilterState* newState();


    public: // Functions used internally by the script engine.

    //    /**
    //     * Pushes a list of features onto the filter's input data queue.
    //     */
    //    void push( const FeatureList& features );

    //    void push( Feature* );

    //    /**
    //     * Pushes a list of drawables onto the filter's input data queue.
    //     */
    //    void push( const DrawableList& drawables );

    //    void push( osg::Drawable* );

    //    /**
    //     * Pushes a list of nodes onto the filter's input data queue.
    //     */
    //    void push( const osg::NodeList& nodes );

    //    void push( osg::Node* );


    //public: // Filter overrides

    //    bool signalCheckpoint();
    //    bool traverse( FilterEnv* env );
    //    void reset( ScriptContext* context );

        virtual void setProperty( const Property& prop );
        virtual Properties getProperties() const;

    public:

        virtual ~CollectionFilter();

    private:

        int           metering;
        //FeatureList   in_features;
        //DrawableList  in_drawables;
        //osg::NodeList in_nodes;
        //osg::ref_ptr<FilterEnv> saved_env;
    };
}


#endif // _OSGGIS_COLLECTION_FILTER_H_